#
# This file was intended to replace the dbf joiner.
# It will create the join to the appropriate river network as a view in Postgres
# based off the dbf file or model output. This may also prove useful when loading new models into
# Postgres and eventually importing into Geoserver. Create the view that joins the 
# dbf file to the appropriate river network which will later be exposed as a layer in Geoserver.
# Catchments have a geometry of MultiPolygon flows/reaches have a MultiLineString.
#
#   
# net.geom ::geometry(MultiPolygon, 4326) for catch  or net.geom ::geometry(MultiLineString, 4326) for flow, or add the MZ for flow with 4 dim
# Parms : VIEW_LAYER_NAME, GEOMTYPE, RIVER_NETWORK_TABLE_NAME, DBF_ID
CreateView = \
CREATE OR REPLACE VIEW sparrow_overlay.@VIEW_LAYER_NAME@ AS \
SELECT dbf.identifier AS "IDENTIFIER", \
    dbf.value AS "VALUE", \
    net.gid, \
    @GEOMTYPE@ AS geom \
   FROM sparrow_overlay.model_output dbf, \
    sparrow_overlay.@RIVER_NETWORK_TABLE_NAME@ net \
 WHERE dbf.identifier = net.identifier \
AND dbf.model_output_id = @DBF_ID@; 
#
# Inserts the dbf data into a single table, model_output
#Parms: $MODEL_NBR$, $IDENTIFIER$, $VALUE$, $MODEL_OUTPUT_ID$, $LAST_UPDATE$
InsertModelOutputRow = \
INSERT INTO sparrow_overlay.model_output(model_nbr, identifier, value, model_output_id, last_update) \
VALUES ($MODEL_NBR$, $IDENTIFIER$, $VALUE$, $MODEL_OUTPUT_ID$, $LAST_UPDATE$);
#
#
# Dynamic retrieval of all the tables that have 4 dimensions.
Select4DimTables = \
select distinct f_table_name from public.geometry_columns where f_table_schema = 'sparrow_overlay' and coord_dimension = 4;
#
# Parm: $MODEL_NBR$
# Gets the table name needed to join and create the layer
GetTableNames = \
SELECT reg.catch_table_name, reg.flow_table_name \
FROM sparrow_overlay.region reg, \
sparrow_overlay.model_to_region mod \
WHERE reg.region_id = mod.model_region \
AND mod.model_nbr = $MODEL_NBR$;
#
# verifies if the row that represents the model output table already exists.
SelectExists_old = \
SELECT count(*) FROM sparrow_overlay.model_output WHERE model_output_id = $MODEL_OUTPUT_ID$;
# verifies if the row that represents the model output table already exists.
SelectExists = \
select exists(select 1 from sparrow_overlay.model_output where model_output_id = $MODEL_OUTPUT_ID$) AS "exists";
